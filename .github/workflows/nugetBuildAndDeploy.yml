name: .NET Core
on:
  push:
    branches:
      - main
      - development
  pull_request:
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME_CORE: Dagable.Core
  PROJECT_NAME_CORE_SCHEDULING: Dagable.Core.Scheduling
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/dagable/
  GITHUB_USER: jwmxyz
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.100
      - name: Restore Dagable.Core.Scheduling
        run: dotnet restore ./src/$PROJECT_NAME_CORE_SCHEDULING
      - name: Build Dagable.Core.Scheduling
        run: dotnet build -c Release ./src/$PROJECT_NAME_CORE_SCHEDULING --no-restore
      - name: Test Dagable.Core.Scheduling
        run: dotnet test -c Release ./src/$PROJECT_NAME_CORE_SCHEDULING
      - name: Restore Dagable.Core
        run: dotnet restore ./src/$PROJECT_NAME_CORE
      - name: Build Dagable.Core
        run: dotnet build -c Release ./src/$PROJECT_NAME_CORE --no-restore
      - name: Test Dagable.Core
        run: dotnet test -c Release ./src/$PROJECT_NAME_CORE
      - name: Pack
        if: matrix.os == 'ubuntu-latest'
        run: |
          latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.1)
          runId=$GITHUB_RUN_ID
          packageVersion="${latestTag//v}-build.${runId}"
          dotnet pack -v normal -c Release --no-restore --include-symbols --include-source -p:PackageVersion=$packageVersion src/$PROJECT_NAME_CORE/$PROJECT_NAME_CORE.*proj
          dotnet pack -v normal -c Release --no-restore --include-symbols --include-source -p:PackageVersion=$packageVersion src/$PROJECT_NAME_CORE_SCHEDULING/$PROJECT_NAME_CORE_SCHEDULING.*proj
      - name: Upload Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: nupkg
          path: |
            ./src/${{ env.PROJECT_NAME_CORE }}/bin/Release/*.nupkg
            ./src/${{ env.PROJECT_NAME_CORE_SCHEDULING }}/bin/Release/*.nupkg
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in nupkg/*/bin/Release/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.100
      - name: Restore Dagable.Core.Scheduling
        run: dotnet restore ./src/$PROJECT_NAME_CORE_SCHEDULING
      - name: Build Dagable.Core.Scheduling
        run: dotnet build -c Release ./src/$PROJECT_NAME_CORE_SCHEDULING --no-restore
      - name: Test Dagable.Core.Scheduling
        run: dotnet test -c Release ./src/$PROJECT_NAME_CORE_SCHEDULING 
      - name: Restore Dagable.Core
        run: dotnet restore ./src/$PROJECT_NAME_CORE
      - name: Build Dagable.Core
        run: dotnet build -c Release ./src/$PROJECT_NAME_CORE --no-restore
      - name: Test Dagable.Core
        run: dotnet test -c Release ./src/$PROJECT_NAME_CORE
      - name: Create Release NuGet package
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          echo Version: $VERSION
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          dotnet pack -v normal -c Release --no-restore --include-symbols --include-source -p:PackageVersion=$VERSION -o nupkg src/$PROJECT_NAME_CORE/$PROJECT_NAME_CORE.*proj
          dotnet pack -v normal -c Release --no-restore --include-symbols --include-source -p:PackageVersion=$VERSION -o nupkg src/$PROJECT_NAME_CORE_SCHEDULING/$PROJECT_NAME_CORE_SCHEDULING.*proj
      - name: Push to GitHub Feed
        run: |
          for f in nupkg/*/bin/Release/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
      - name: Push to NuGet Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
